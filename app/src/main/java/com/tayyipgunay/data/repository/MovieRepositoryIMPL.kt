package com.tayyipgunay.data.repository

import android.net.http.HttpException
import android.os.Build
import androidx.annotation.RequiresExtension
import com.tayyipgunay.data.remote.MovieAPI
import com.tayyipgunay.data.remote.dto.MovieDetailDto
import com.tayyipgunay.data.remote.dto.MoviesDto
import com.tayyipgunay.domain.repository.MovieRepository
import com.tayyipgunay.util.Resource
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.flowOn
import java.io.IOException
import javax.inject.Inject
import javax.inject.Singleton


class MovieRepositoryIMPL @Inject constructor(private val api: MovieAPI): MovieRepository {


    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override suspend fun getMovies(search: String): Flow<Resource<MoviesDto>> = flow {
        emit(Resource.Loading()) // Ã–nce Loading durumu yay

        try {
            val response = api.getMovies(search)

            if (response.isSuccessful) {
                response.body()?.let { responseBody ->
                    if (!responseBody.search.isNullOrEmpty()) {
                        emit(Resource.Success(responseBody)) // BaÅŸarÄ±lÄ± veri yay
                    } else {
                        emit(Resource.Error("No Games Found.")) // SonuÃ§ bulunamadÄ±
                    }
                } ?: emit(Resource.Error("No Games Found")) // YanÄ±t boÅŸ
            }
        } catch (e: IOException) {
            // ðŸ”¹ Ä°nternet baÄŸlantÄ±sÄ± yoksa Ã¶zel hata mesajÄ±
            emit(Resource.Error("No internet connection. Please check your network."))
        } catch (e: HttpException) {
            // ðŸ”¹ API hatalarÄ±nÄ± yakalamak iÃ§in
            emit(Resource.Error("Server error: ${e.message}"))
        } catch (e: Exception) {
            // ðŸ”¹ Beklenmeyen hatalarÄ± yakalamak iÃ§in
            emit(Resource.Error("Unexpected Error: ${e.message}"))
        }
    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override suspend fun getMovieDetail(imdbId: String): Flow<Resource<MovieDetailDto>> = flow {
        emit(Resource.Loading()) // ðŸ”¹ Ã–nce Loading durumu yay

        try {
            val response = api.getMovieDetail(imdbId)

            if (response.isSuccessful) {
                response.body()?.let { responseBody ->
                    if (!responseBody.response.isNullOrEmpty()) {
                        emit(Resource.Success(responseBody)) // ðŸ”¹ BaÅŸarÄ±lÄ± veri yay
                    } else {
                        emit(Resource.Error("No movie details found."))
                    }
                } ?: emit(Resource.Error("No movie details found.")) // YanÄ±t boÅŸ
            } else {
                emit(Resource.Error("API Error: ${response.code()} - ${response.message()}"))
            }
        } catch (e: IOException) {
            emit(Resource.Error("No internet connection. Please check your network.")) // ðŸ”¹ Ä°nternet baÄŸlantÄ±sÄ± hatasÄ±
        } catch (e: HttpException) {
            emit(Resource.Error("Server error: ${e.message}")) // ðŸ”¹ API sunucu hatasÄ±
        } catch (e: Exception) {
            emit(Resource.Error("Unexpected Error: ${e.message}")) // ðŸ”¹ Genel hata yÃ¶netimi
        }
    }
}
/*
/*override suspend fun getMovies(search: String): Resource<MoviesDto> {
       val response = api.getMovies(search)
       return response.body()?.let {responseBody->
           Resource.Success(responseBody)
       } ?: Resource.Error("Hata kodu: ${response.code()} - ${response.message()}")
   }*/
 */